#!/usr/bin/python
# ipwndfu: open-source jailbreaking tool for older iOS devices
# Author: axi0mX

import binascii, datetime, getopt, hashlib, struct, sys, time
import dfu, steaks4uce, limera1n, SHAtter, utilities
from dfuexec import *

def print_help():
    print 'Basic commands:'
    print '%s -p\t\t\t\t# exploit for pwned DFU Mode (must be in DFU Mode)' % sys.argv[0]
    print '%s -x\t\t\t\t# install alloc8 exploit to NOR' % sys.argv[0]
    print 'Advanced commands:'
    print '%s --send=[filename]\t\t# send file to device in DFU Mode' % sys.argv[0]
    print '%s --dump=[address,length]\t# dump memory to stdout' % sys.argv[0]
    print '%s --hexdump=[address,length]\t# hexdump memory to stdout' % sys.argv[0]
    print '%s --dump-rom\t\t\t# dump SecureROM' % sys.argv[0]
    print '%s --dump-nor=[filename]\t\t# dump NOR to file' % sys.argv[0]
    print '%s --flash-nor=[filename]\t# flash NOR (header and firmware only) from file' % sys.argv[0]
    print '%s --24kpwn\t\t\t# install 24Kpwn exploit to NOR' % sys.argv[0]
    print '%s --decrypt-gid=[hexdata]\t# AES decrypt with GID key' % sys.argv[0]
    print '%s --encrypt-gid=[hexdata]\t# AES encrypt with GID key' % sys.argv[0]
    print '%s --decrypt-uid=[hexdata]\t# AES decrypt with UID key' % sys.argv[0]
    print '%s --encrypt-uid=[hexdata]\t# AES encrypt with UID key' % sys.argv[0]

if __name__ == '__main__':
    try:
        advanced = ['send=', 'dump=', 'hexdump=', 'dump-rom', 'dump-nor=', 'flash-nor=', '24kpwn', 'decrypt-gid=', 'encrypt-gid=', 'decrypt-uid=', 'decrypt-gid=']
        opts, args = getopt.getopt(sys.argv[1:], 'px', advanced)
    except getopt.GetoptError:
        print 'ERROR: Invalid arguments provided.'
        print_help()
        sys.exit(2)

    if len(opts) == 0:
        print 'ERROR: No arguments provided.'
        print_help()
        sys.exit(2)

    for opt, arg in opts:
        if opt == '-p':
            device = dfu.acquire_device()
            serial_number = device.serial_number
            dfu.release_device(device)

            if 'CPID:8720' in serial_number:
                steaks4uce.exploit()
            elif 'CPID:8920' in serial_number:
                limera1n.exploit()
            elif 'CPID:8922' in serial_number:
                limera1n.exploit()
            elif 'CPID:8930' in serial_number:
                SHAtter.exploit()
            else:
                print 'Found:', serial_number
                print 'ERROR: This device is not supported.'
                sys.exit(1)

        if opt == '-x':
            device = PwnedDFUDevice()
            if device.config.cpid != '8920':
                print 'This is not a compatible device. alloc8 exploit is for iPhone 3GS only.'
                sys.exit(1)
            if device.config.version == '359.3':
                print 'WARNING: iPhone 3GS (old bootrom) was detected. Use 24Kpwn exploit for faster boots. alloc8 exploit is supported for testing purposes only.'
                raw_input("Press ENTER to continue.")

            print 'Installing alloc8 exploit to NOR.'

            print 'Dumping SecureROM.'
            securerom = device.securerom_dump()

            nor = device.nor_dump(saveBackup=True)

            print 'Preparing modified NOR with alloc8 exploit.'
            new_nor = device.add_alloc8_exploit_to_nor(nor, securerom)

            device.flash_nor(new_nor)

        if opt == '--send':
            try:
                with open(arg, 'rb') as f:
                    data = f.read()
            except IOError:
                print 'ERROR: Could not read file:', arg
                sys.exit(1)

            device = dfu.acquire_device()
            dfu.reset_counters(device)
            dfu.send_data(device, data)
            dfu.request_image_validation(device)
            dfu.release_device(device)

        if opt == '--dump':
            if arg.count(',') != 1:
                print 'ERROR: You must provide exactly 2 comma separated values: address,length'
                sys.exit(1)
            raw_address, raw_length = arg.split(',')
            address = int(raw_address, 16) if raw_address.startswith('0x') else int(raw_address, 10)
            length = int(raw_length, 16) if raw_length.startswith('0x') else int(raw_length, 10)

            device = PwnedDFUDevice()
            print device.read_memory(address, length)

        if opt == '--hexdump':
            if arg.count(',') != 1:
                print 'ERROR: You must provide exactly 2 comma separated values: address,length'
                sys.exit(1)
            raw_address, raw_length = arg.split(',')
            address = int(raw_address, 16) if raw_address.startswith('0x') else int(raw_address, 10)
            length = int(raw_length, 16) if raw_length.startswith('0x') else int(raw_length, 10)

            device = PwnedDFUDevice()
            dump = device.read_memory(address, length)
            print utilities.hex_dump(dump, address),

        if opt == '--dump-rom':
            device = PwnedDFUDevice()
            securerom = device.securerom_dump()
            filename = 'SecureROM-%s-RELEASE.dump' % device.config.version
            f = open(filename, 'wb')
            f.write(securerom)
            f.close()
            print 'SecureROM dumped to file:', filename

        if opt == '--dump-nor':
            device = PwnedDFUDevice()
            if device.config.cpid != '8920':
                print 'This is not a compatible device. Dumping NOR is only supported on iPhone 3GS.'
                sys.exit(1)
            nor = device.nor_dump(saveBackup=False)
            f = open(arg, 'wb')
            f.write(nor)
            f.close()
            print 'NOR dumped to file: %s' % arg

        if opt == '--flash-nor':
            print 'Flashing NOR from file:', arg
            f = open(arg, 'rb')
            new_nor = f.read()
            f.close()
            if new_nor[:4] != 'IMG2'[::-1]:
                print 'ERROR: Bad IMG2 header magic. This is not a valid NOR. Exiting.'
                sys.exit(1)

            device = PwnedDFUDevice()
            if device.config.cpid != '8920':
                print 'This is not a compatible device. Flashing NOR is only supported on iPhone 3GS.'
                sys.exit(1)
            device.nor_dump(saveBackup=True)
            device.flash_nor(new_nor)

        if opt == '--24kpwn':
            device = PwnedDFUDevice()
            if device.config.version != '359.3':
                print 'Only iPhone 3GS (old bootrom) is supported.'
                sys.exit(1)
            print '*** based on 24Kpwn exploit (segment overflow) by the iPhone Dev Team ***'
            print 'Installing 24Kpwn exploit to NOR.'
            nor = device.nor_dump(saveBackup=True)
            new_nor = device.add_24Kpwn_exploit_to_nor(nor)
            device.flash_nor(new_nor)

        if opt == '--decrypt-gid':
            device = PwnedDFUDevice()
            print 'Decrypting with S5L%s GID key.' % device.config.cpid
            print device.aes_hex(arg, AES_DECRYPT, AES_GID_KEY)

        if opt == '--encrypt-gid':
            device = PwnedDFUDevice()
            print 'Encrypting with S5L%s GID key.' % device.config.cpid
            print device.aes_hex(arg, AES_ENCRYPT, AES_GID_KEY)

        if opt == '--decrypt-uid':
            device = PwnedDFUDevice()
            print 'Decrypting with device-specific UID key.'
            print device.aes_hex(arg, AES_DECRYPT, AES_UID_KEY)

        if opt == '--encrypt-uid':
            device = PwnedDFUDevice()
            print 'Encrypting with device-specific UID key.'
            print device.aes_hex(arg, AES_ENCRYPT, AES_UID_KEY)
